// === –ú–£–ó–´–ö–ê–õ–¨–ù–´–ô –ë–û–¢ –î–õ–Ø RAILWAY.APP ===
// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫, –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7

const { Client, GatewayIntentBits } = require('discord.js');
const {
    createAudioPlayer,
    createAudioResource,
    joinVoiceChannel,
    NoSubscriberBehavior
} = require('@discordjs/voice');
const ytdl = require('ytdl-core');
const ytSearch = require('yt-search');
const http = require('http');

// –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ]
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–µ—Ä–µ–¥–∏
const queue = new Map();

// –ë–æ—Ç –≥–æ—Ç–æ–≤
client.once('clientReady', () => {
    console.log(`‚úÖ –ë–æ—Ç ${client.user.tag} –≥–æ—Ç–æ–≤! –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway.`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on('messageCreate', async message => {
    if (message.author.bot) return;
    if (!message.content.startsWith('!')) return;

    const args = message.content.slice(1).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    const { channel: voiceChannel } = message.member.voice;
    const guildId = message.guild.id;

    // –ö–æ–º–∞–Ω–¥–∞: play / p
    if (command === 'play' || command === 'p') {
        if (!voiceChannel) return message.reply('üîä –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!');
        if (!args.length) return message.reply('üéµ –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É!');

        const search = args.join(' ');
        const songInfo = await ytSearch(search);
        const video = songInfo.videos[0];
        if (!video) return message.reply('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

        const song = { title: video.title, url: video.url };

        const serverQueue = queue.get(guildId) || {
            textChannel: message.channel,
            voiceChannel: voiceChannel,
            connection: null,
            player: createAudioPlayer({ behaviors: { noSubscriber: NoSubscriberBehavior.Pause } }),
            songs: [],
            playing: true
        };

        serverQueue.songs.push(song);
        queue.set(guildId, serverQueue);

        if (!serverQueue.connection) {
            try {
                serverQueue.connection = joinVoiceChannel({
                    channelId: voiceChannel.id,
                    guildId: voiceChannel.guild.id,
                    adapterCreator: voiceChannel.guild.voiceAdapterCreator,
                });
                serverQueue.connection.subscribe(serverQueue.player);
                play(guildId, serverQueue.songs[0]);
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
                queue.delete(guildId);
                return message.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.');
            }
        } else {
            message.channel.send(`üé∂ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: **${song.title}**`);
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: skip, stop, pause, resume, queue
    if (command === 'skip') {
        const serverQueue = queue.get(guildId);
        if (!serverQueue) return message.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.');
        serverQueue.player.stop();
        message.channel.send('‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ!');
    }

    if (command === 'stop') {
        const serverQueue = queue.get(guildId);
        if (!serverQueue) return message.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.');
        serverQueue.songs = [];
        serverQueue.player.stop();
        message.channel.send('‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.');
    }

    if (command === 'pause') {
        const serverQueue = queue.get(guildId);
        if (!serverQueue) return message.reply('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.');
        serverQueue.player.pause();
        message.channel.send('‚è∏ –ü–∞—É–∑–∞.');
    }

    if (command === 'resume') {
        const serverQueue = queue.get(guildId);
        if (!serverQueue) return message.reply('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
        serverQueue.player.unpause();
        message.channel.send('‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!');
    }

    if (command === 'queue') {
        const serverQueue = queue.get(guildId);
        if (!serverQueue || serverQueue.songs.length === 0) {
            return message.channel.send('üìã –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.');
        }
        const list = serverQueue.songs.map((s, i) => `**${i + 1}.** ${s.title}`).join('\n');
        message.channel.send(`üìã –û—á–µ—Ä–µ–¥—å (${serverQueue.songs.length}):\n${list}`);
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
function play(guildId, song) {
    const serverQueue = queue.get(guildId);
    if (!serverQueue) return;

    if (!song) {
        serverQueue.connection.destroy();
        queue.delete(guildId);
        serverQueue.textChannel.send('‚èπ –û—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.');
        return;
    }

    console.log('üéµ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ:', song.title);

    const stream = ytdl(song.url, { filter: 'audioonly', quality: 'highestaudio' });
    const resource = createAudioResource(stream);
    serverQueue.player.play(resource);

    serverQueue.textChannel.send(`‚ñ∂Ô∏è –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **${song.title}**`);

    serverQueue.player.on('stateChange', (oldState, newState) => {
        if (newState.status === 'idle') {
            serverQueue.songs.shift();
            play(guildId, serverQueue.songs[0]);
        }
    });
}

// üîÅ HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è" –±–æ—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–ª –Ω–∞ Railway)
const PORT = process.env.PORT || 3000;
const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end(`–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${client.guilds.cache.size} —Å–µ—Ä–≤–µ—Ä–∞–º.`);
});

server.listen(PORT, () => {
    console.log(`üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const TOKEN = process.env.TOKEN;
if (!TOKEN) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway.');
    process.exit(1);
}

client.login(TOKEN);